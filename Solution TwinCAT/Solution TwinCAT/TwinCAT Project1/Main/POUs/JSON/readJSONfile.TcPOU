<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.2">
  <POU Name="readJSONfile" Id="{2819cac7-0b13-4b41-af31-ffb6027e95b7}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM readJSONfile
VAR
		sSrcNetId		        : T_AmsNetId := '';						(* TwinCAT network address of the source file *)
		
		sSrcPathName            : T_MaxString:=  'C:\Users\Jarni\OneDrive - PXL\Engineering Project\cedric\test.json';	
	
        bExecute                : BOOL; 								(* Rising edge start fb execution *)
        tTimeOut                : TIME := DEFAULT_ADS_TIMEOUT;			(* Max. ADS timeout time *)

        bBusy                   : BOOL;									(* TRUE => File copy execution in progress, FALSE => File copy execution idle *)
	 	bError                  : BOOL;									(* TRUE => Error, FALSE => No error *)
	 	nErrId                  : UDINT;								(* Error code *)

        fbFileOpen              : FB_FileOpen;
        fbFileClose             : FB_FileClose;
        fbFileRead              : FB_FileRead;
        fbFileWrite             : FB_FileWrite;

        hSrcFile                : UINT   := 0;							(* File handle of the source file *)
 		hDestFile               : UINT   := 0;							(* File handle of the destination file *)

        Step                    : DWORD;									(* For Case*)
        RisingEdge              : R_TRIG;

        buffRead                : STRING(2047);    						(* String read from file, JSON CODE *)
		findN					: STRING := '$N';  						(* String to replace *)
		findT					: STRING := '$T';  						(* String to replace *)
		replstr					: STRING := '';    						(* Replace with '' *)
 		cbReadLength            : UDINT := 0;	    					(* *)				

END_VAR

]]></Declaration>
    <Implementation>
      <ST><![CDATA[RisingEdge(CLK:=bExecute OR com.readfile );

CASE Step OF
        0:      (* Idle state *)
         	IF RisingEdge.Q THEN
                        bBusy := TRUE;
                        bError:= FALSE;
                        nErrId:=0;
                        Step := 1;
                        cbReadLength:=0;
                        hSrcFile:=0;
                        hDestFile:=0;
                END_IF

        1:      (* Open source file *)
			fbFileOpen( bExecute := FALSE );
			fbFileOpen( sNetId := sSrcNetId, sPathName := sSrcPathName,				//temporary static
					nMode := FOPEN_MODEREAD OR FOPEN_MODETEXT,
					ePath := PATH_GENERIC, tTimeout := tTimeOut, bExecute := TRUE );
			Step := Step + 1;
				
        2:		(* Check for erros *)    
			fbFileOpen( bExecute := FALSE );
			IF NOT fbFileOpen.bBusy THEN
					IF fbFileOpen.bError THEN
							nErrId := fbFileOpen.nErrId;
							bError := TRUE;
							Step := 50;
					ELSE
							hSrcFile := fbFileOpen.hFile;
							Step := Step + 1;
					END_IF
			END_IF

		3:      (* Read data from source file *)
			cbReadLength := 0;
			fbFileRead( bExecute:= FALSE );
			fbFileRead( bExecute:=TRUE, sNetId:=sSrcNetId, hFile:=hSrcFile,
					pReadBuff:= ADR(buffRead), cbReadLen:= SIZEOF(buffRead),
					tTimeout:=tTimeOut );
			Step := Step + 1;
				
		4:  	(* Check for erros *)    
			fbFileRead( bExecute:= FALSE );
			IF NOT fbFileRead.bBusy THEN
					IF fbFileRead.bError THEN
							nErrId := fbFileRead.nErrId;
							bError := TRUE;
							Step := 50;
					ELSE
							cbReadLength := fbFileRead.cbRead;
							Step := Step + 1;
					END_IF
			END_IF
				
		5:		(* Deletes "$N" AND "$T" in the string *)
			FindAndReplace( ADR(buffRead), ADR(findN), ADR(replstr), ADR(buffRead), SIZEOF(buffRead) );  //$N
			FindAndReplace( ADR(buffRead), ADR(findT), ADR(replstr), ADR(buffRead), SIZEOF(buffRead) );	 //$T
			COM.JSONFILE := buffRead;  
			Step := 50;
		
        40:		(* Close source file *)
			fbFileClose( bExecute := FALSE );
			fbFileClose( sNetId:=sSrcNetId, hFile:=hSrcFile, bExecute:=TRUE, tTimeout:=tTimeOut );
			Step := Step + 1;
			
        41:		(* Check for erros *)    
			fbFileClose( bExecute := FALSE );
			IF NOT fbFileClose.bBusy THEN
					IF fbFileClose.bError THEN
							nErrId := fbFileClose.nErrId;
							bError := TRUE;
					END_IF
					Step := 50;
					hSrcFile := 0;
			END_IF

        50: (* Error or ready => Cleanup *)
			 IF (hSrcFile <> 0 ) THEN
							Step := 40; (* Close the source file *)
			 ELSE
							Step := 0;      (* Ready *)
							bBusy := FALSE;
			 END_IF
			 bexecute := FALSE;
			 com.readfile := FALSE;
END_CASE]]></ST>
    </Implementation>
    <LineIds Name="readJSONfile">
      <LineId Id="34" Count="19" />
      <LineId Id="272" Count="0" />
      <LineId Id="54" Count="11" />
      <LineId Id="85" Count="7" />
      <LineId Id="270" Count="0" />
      <LineId Id="93" Count="0" />
      <LineId Id="390" Count="0" />
      <LineId Id="95" Count="9" />
      <LineId Id="347" Count="0" />
      <LineId Id="273" Count="0" />
      <LineId Id="391" Count="0" />
      <LineId Id="352" Count="0" />
      <LineId Id="426" Count="0" />
      <LineId Id="345" Count="1" />
      <LineId Id="143" Count="3" />
      <LineId Id="392" Count="0" />
      <LineId Id="147" Count="10" />
      <LineId Id="238" Count="0" />
      <LineId Id="161" Count="5" />
      <LineId Id="240" Count="0" />
      <LineId Id="459" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>